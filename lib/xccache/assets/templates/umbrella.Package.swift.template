// swift-tools-version: 6.0
import Foundation
import PackageDescription

/*
 MARK: INSTRUCTIONS
 ----------------------------------------------------------------------------------------------------------------------
 This Package manifest is auto-generated from xccache (last updated: <%= timestamp %>).
 ----------------------------------------------------------------------------------------------------------------------
 During local development, you can switch between *BINARY mode* and *SOURCE mode* by adding or removing the `.binary`
 suffix in the JSON below.
 As a user, you just need to care about the JSON. The rest is just the tool's internal logic.

 NOTE that a product (ex. `pkg/foo.binary`) can only be used as binary if:
 - Binary exists for `pkg/foo` (in `xccache/packages/binaries/foo/foo.xcframework`)
 - Binary exists for all of its dependencies
 The tool auto-fallbacks to the *SOURCE mode* if the conditions are not met.
 ----------------------------------------------------------------------------------------------------------------------
*/
let JSON = """
<%= json %>
"""
let DEPENDENCIES: [Package.Dependency] = [
<%= dependencies %>
]
let PLATFORMS: [SupportedPlatform] = [
<%= platforms %>
]
let PRODUCTS_TO_TARGETS: [String: [String]] = try parseJSON("""
<%= products_to_targets %>
""")
// ------------------------------------------------------------------------------------

// MARK: Main
_ = try XCCache.Package(parseJSON(JSON)).spm

// MARK: XCCache
enum XCCache {
  // MARK: Config
  @MainActor
  struct Config {
    static let pkgDir = URL(filePath: #filePath).deletingLastPathComponent()
    // NOTE: Do NOT change `binariesDir` to `static let`
    // Somehow, incremental resolution doesnt work causing the `binaryExist` wrongly cached
    static var binariesDir: URL { pkgDir.appending(path: "binaries") }
  }

  // MARK: Package
  @MainActor
  final class Package {
    let targets: [XCCache.Target]
    init(_ dict: [String: [String]]) {
      targets = dict.map { XCCache.Target($0, $1) }
    }

    var spm: PackageDescription.Package {
      let regularTargets = targets.map(\.spm)
      let binaryTargets = targets.flatMap(\.flattenRegularDeps).unique(by: \.name).compactMap(\.spmBinaryTarget)
      return .init(
        name: "xccache",
        platforms: PLATFORMS,
        products: targets.map(\.spmProduct),
        dependencies: DEPENDENCIES,
        targets: regularTargets + binaryTargets
      )
    }
  }

  // MARK: Target
  @MainActor
  final class Target {
    let name: String
    let deps: [UmbrellaDependency]
    init(_ name: String, _ deps: [String]) {
      self.name = name
      self.deps = deps.map { UmbrellaDependency($0) }
    }

    var spmProduct: PackageDescription.Product {
      .library(name: name, targets: [name])
    }
    var spm: PackageDescription.Target {
      .target(
        name: name,
        dependencies: flattenRegularDeps.map(\.spm),
        path: ".Sources/\(name)",
        swiftSettings: [
          .unsafeFlags(macroFlags),
        ]
      )
    }
    var flattenDeps: [Dependency] { deps.flatMap(\.toBinariesIfOk).unique(by: \.name) }
    var flattenRegularDeps: [Dependency] { flattenDeps.filter(\.regular) }
    var macroFlags: [String] { flattenDeps.filter(\.macroBinary).flatMap(\.macroFlags) }
  }

  // MARK: Dependency
  @MainActor
  class Dependency {
    let name: String
    let bareName: String
    let binaryURL: URL
    let binary: Bool
    let macro: Bool
    var regular: Bool { !macro }
    var regularBinary: Bool { binary && regular }
    var macroBinary: Bool { binary && macro }

    init(_ name: String) {
      self.name = name
      self.bareName = String(name.basename.split(separator: ".")[0])
      self.macro = name.contains(".macro")
      self.binaryURL = if macro {
        Config.binariesDir.appending(path: "\(bareName)/\(bareName).macro").readlink()
      } else {
        Config.binariesDir.appending(path: "\(bareName)/\(bareName).xcframework").readlink()
      }
      self.binary = name.hasSuffix(".binary") && binaryURL.exist
    }

    var macroFlags: [String] {
      ["-load-plugin-executable", "\(binaryURL.path())#\(bareName)"]
    }

    var spm: PackageDescription.Target.Dependency {
      if binary { return .byName(name: name) }
      return .product(name: bareName, package: name.slug)
    }
    var spmBinaryTarget: PackageDescription.Target? {
      // The real link may have different basename in case of remote binary targets
      // For ex. `binaries/Foo/Foo.xcframework (symlink)` -> `.build/artifacts/foo/Bar.xcframework`
      // In this case, we should use `Foo.xcframework` (of the symlink instead coz it matches the target name)
      // Workaround: If readlink() is inside binaries dir -> use basename of the resolved link.
      // Otherwise, it wasn't built by xccache -> just use basename of the symlink
      //
      // Why do we need to resolve symlinks? Well, Xcode caches and uses the wrongly resolved links :(
      let basename = if binaryURL.path().contains(Config.binariesDir.path()) {
        binaryURL.basename
      } else {
        "\(bareName).xcframework"
      }
      return regularBinary ? .binaryTarget(name: name, path: "binaries/\(bareName)/\(basename)") : nil
    }
  }

  @MainActor
  class UmbrellaDependency: Dependency {
    let binaries: [Dependency]
    override init(_ name: String) {
      binaries = (PRODUCTS_TO_TARGETS[name.withoutBinary] ?? []).map { Dependency("\($0).binary") }
      super.init(name)
    }
    var toBinariesIfOk: [Dependency] {
      if name.hasSuffix(".binary"), !binaries.isEmpty && binaries.allSatisfy(\.binary) { return binaries }
      return [Dependency(name.withoutBinary)]
    }
  }
}

// MARK: Helpers
func parseJSON<T>(_ content: String) throws -> T {
  if let data = content.data(using: .utf8), let result = try JSONSerialization.jsonObject(with: data) as? T {
    return result
  }
  throw NSError(domain: "Invalid JSON:\n\(content)", code: 111)
}

extension URL {
  var basename: String { lastPathComponent }
  var exist: Bool { FileManager.default.fileExists(atPath: readlink().path()) }
  func readlink() -> URL { resolvingSymlinksInPath() }
}

extension String {
  var slug: String { (self as NSString).deletingLastPathComponent.basename }
  var basename: String { (self as NSString).lastPathComponent }
  var withoutExtenstion: String { (self as NSString).deletingPathExtension }
  var withoutBinary: String { replacing(#/\.binary$/#, with: "") }
}

extension Sequence {
  func unique<T: Hashable>(by: (Element) -> T) -> [Element] {
    var seen: Set<T> = []
    return filter { seen.insert(by($0)).inserted }
  }
}
