// MARK: GENERATED
// ------------------------------------------------
graph = JSON.parse(`
<%= json %>
`);
// ------------------------------------------------

const cy = cytoscape({
  container: $('#cy'),
  elements: ([...graph.nodes, ...graph.edges]).map(x => ({data: x})),
  style: [
    {
      selector: 'node',
      style: {
        'label': (e) => e.id().split("/")[1],
        'color': '#fff',
        'text-valign': 'center',
        'text-halign': 'center',
        'font-size': '14px',
        'shape': 'roundrectangle',
        'width': (e) => Math.max(50, e.id().split("/")[1].length * 8),
      }
    },
    {
      selector: 'node:selected',
      style: {
        'font-weight': 'bold',
        'border-width': 3,
        'border-color': '#333',
      }
    },
    {
      selector: 'node[cache="hit"]',
      style: {'background-color': '#339966'}
    },
    {
      selector: 'node[cache="missed"]',
      style: {'background-color': '#ff6f00'}
    },
    {
      selector: 'node[type="agg"]',
      style: {
        'background-color': '#333',
      }
    },
    {
      selector: 'node[cache="ignored"]',
      style: {
        'background-color': '#888',
      }
    },
    {
      selector: 'edge',
      style: {
        'width': 1,
        'target-arrow-shape': 'triangle',
        'curve-style': 'bezier',
        'line-color': '#ccc',
        // 'line-color': e => e.target().style('background-color') || '#999',
        'target-arrow-color': e => e.style('line-color'),
      }
    },
  ],
  layout: {
    name: 'fcose',
    animationDuration: 300,
    nodeRepulsion: 10000,
    idealEdgeLength: 120,
    gravity: 0.25,
  }
});

cy.on('select', 'node', function(event) {
  $('.node-info').css('display', 'block');
  const node = event.target;
  const info = $('.node-info .info');
  info.find('.target').html(node.id());
  info.find('.checksum').html(node.data('checksum') || 'NA');
  info.find('.binary')
    .html((node.data('binary') || 'NA').split('/').slice(-1))
    .attr({'href': node.data('binary') || ''});

  // Mark neighbor as focused, dim others
  const focused = node.neighborhood().add(node);
  focused.animate({style: {'opacity': 1}, duration: 200});
  cy.elements().not(focused).animate({style: {'opacity': 0.15}, duration: 200});
});

cy.on('tap', function(event) {
  if (event.target == cy) {
    $('.node-info').css('display', 'none');
    cy.elements().animate({style: {'opacity': 1}});
  }
});
